#-----------------------------
#DIESES DOKUMENT ERSETZT DIE 01 METABOLIC PATHWAY SELECTION
# Hier nehemen wir alle canonischen pathways von msigdbr und überprüfen diese auf kompatibilität mit unseren daten
# Sollten pathways zu 90% in unseren gecleanten genen enthalen sein werden sie weiter verwendet
#-----------------------------
#install.packages("msigdbr")
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install(version = "3.14")
library(msigdbr)
#oeffnen der Datenbank
msigdbr_pathways = msigdbr(species = "Homo sapiens", category = "C2")
View(msigdbr_pathways)
res = getBM(attributes = c("ensembl_gene_id",
'name_1006'
),
filters = "ensembl_gene_id",
values = pathways[[1]],
mart = mart )
View(res)
yy = listAttributes(mart)
View(yy)
res = getBM(attributes = c("ensembl_gene_id",
'name_1006', 'description_1006'
),
filters = "ensembl_gene_id",
values = pathways[[1]],
mart = mart )
res = getBM(attributes = c("ensembl_gene_id",
'name_1006', 'definition_1006'
),
filters = "ensembl_gene_id",
values = pathways[[1]],
mart = mart )
res = getBM(attributes = c("ensembl_gene_id",
'name_1006', 'definition_1006'
),
filters = "ensembl_gene_id",
values = pathways[[1]],
mart = mart )
View(res)
View(yy)
table(yy$page)
res = getBM(attributes = listAttributes(mart)[1:203,1]
filters = "ensembl_gene_id",
values = pathways[[1]],
mart = mart )
res = getBM(attributes = listAttributes(mart)[1:203,1],
filters = "ensembl_gene_id",
values = pathways[[1]],
mart = mart )
res = getBM(attributes = listAttributes(mart)[44:50,1],
filters = "ensembl_gene_id",
values = pathways[[1]],
mart = mart )
res = getBM(attributes = listAttributes(mart)[44:50,1],
filters = "ensembl_gene_id",
values = pathways[[1]],
mart = mart )
View(res)
res$name_1006 == 'molecular function'
res$name_1006 == 'molecular_function'
res$namespace_1003 == 'molecular_function'
#Ausgabe des häufigsten Terms
res = res[, res$namespace_1003 == 'molecular_function']
#Ausgabe des häufigsten Terms
res = res[res$namespace_1003 == 'molecular_function',]
View(res)
getGOterm = function(pathway){
res = getBM(attributes = c("ensembl_gene_id",
'name_1006', 'namespace_1003'
),
filters = "ensembl_gene_id",
values = pathway,
mart = mart )
#Ausgabe des häufigsten Terms
res = res[res$namespace_1003 == 'molecular_function',]
res = res$name_1006[table(res$name_1006)==max(table(res$name_1006))]
return(res)
}
x = sapply(pathways[1:10], getGOterm)
View(x)
View(pathways)
x = sapply(pathways[[658]], getGOterm)
View(x)
res = getBM(attributes = c("ensembl_gene_id",
'name_1006', 'namespace_1003'
),
filters = "ensembl_gene_id",
values = pathways[[658]],
mart = mart )
res = getBM(attributes = c("ensembl_gene_id",
'name_1006', 'namespace_1003'
),
filters = "ensembl_gene_id",
values = pathways[[658]],
mart = mart )
View(res)
#Ausgabe des häufigsten Terms mit molecular function
res = res[res$namespace_1003 == 'molecular_function',]
View(res)
table(res$name_1006)
max(table(res$name_1006))
res$name_1006[table(res$name_1006)==max(table(res$name_1006))]
getGOterm(pathways[[658]])
colours = c('blue4','dodgerblue4','deepskyblue','cyan',
'lightblue1','aquamarine','chartreuse4',
'aquamarine3','darkolivegreen','darkolivegreen4',
'chartreuse2','darkolivegreen2','lemonchiffon',
'yellow','peachpuff1','gold','orange','red',
'indianred3','orangered4','sienna4','tan3','salmon2',
'plum','rosybrown1','violetred','magenta','magenta4',
'maroon','wheat1','snow3','gray29','black')
#BiocManager::install("GSVA")
#BiocManager::install("ComplexHeatmap")
library(GSVA)
library(pheatmap)
library(ComplexHeatmap)
tcga_anno = readRDS('data/tcga_tumor_annotation.RDS')
load('data/tcga_gsva.RData')
colours = c('blue4','dodgerblue4','deepskyblue','cyan',
'lightblue1','aquamarine','chartreuse4',
'aquamarine3','darkolivegreen','darkolivegreen4',
'chartreuse2','darkolivegreen2','lemonchiffon',
'yellow','peachpuff1','gold','orange','red',
'indianred3','orangered4','sienna4','tan3','salmon2',
'plum','rosybrown1','violetred','magenta','magenta4',
'maroon','wheat1','snow3','gray29','black')
names(colours) = names(table(tcga_anno$cancer_type_abbreviation[1:400]))
colours
list(colours)
x = list(colours)
View(x)
patient.anno = HeatmapAnnotation(Cancer = tcga_anno$cancer_type_abbreviation[1:400],
col = x,
annotation_legend_param = list(
title = "Cancer type",
at = names(table(tcga_anno$cancer_type_abbreviation[1:400])),
labels = names(table(tcga_anno$cancer_type_abbreviation[1:400]))
)
)
patient.anno = HeatmapAnnotation(Cancer = tcga_anno$cancer_type_abbreviation[1:400],
col = colours,
annotation_legend_param = list(
title = "Cancer type",
at = names(table(tcga_anno$cancer_type_abbreviation[1:400])),
labels = names(table(tcga_anno$cancer_type_abbreviation[1:400]))
)
)
patient.anno = HeatmapAnnotation(Cancer = tcga_anno$cancer_type_abbreviation[1:400],
annotation_legend_param = list(
title = "Cancer type",
at = names(table(tcga_anno$cancer_type_abbreviation[1:400])),
labels = names(table(tcga_anno$cancer_type_abbreviation[1:400]),
col = colours)
)
)
Heatmap(tcga_gsva[1:200,1:400],
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
)
patient.anno = HeatmapAnnotation(Cancer = tcga_anno$cancer_type_abbreviation[1:400],
annotation_legend_param = list(
title = "Cancer type",
at = names(table(tcga_anno$cancer_type_abbreviation[1:400])),
labels = names(table(tcga_anno$cancer_type_abbreviation[1:400]),
col = colours)
)
)
patient.anno = HeatmapAnnotation(Cancer = tcga_anno$cancer_type_abbreviation[1:400],
annotation_legend_param = list(
title = "Cancer type",
at = names(table(tcga_anno$cancer_type_abbreviation[1:400])),
labels = names(table(tcga_anno$cancer_type_abbreviation[1:400])),
col = colours)
)
Heatmap(tcga_gsva[1:200,1:400],
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
)
load('data/pathways.RData')
View(pathways)
which(pathways[["Angio_AACR"]])
which(names(pathways) == "Angio_AACR")
rep('metabolic', 612)
c(rep('metabolic', 612), rep('hallmark'), 46)
c(rep('metabolic', 612), rep('hallmark', 46))
pathway.anno = HeatmapAnnotation(Pathway = c(rep('metabolic', 612), rep('hallmark', 46)),
annotation_legend_param = list(
title = "Pathway type",
at = c('metabolic','hallmark'),
labels = c('metabolic','hallmark'))                                          )
Heatmap(tcga_gsva[1:200,1:400],
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno
)
pathway.anno = rowAnnotation(Pathway = c(rep('metabolic', 612), rep('hallmark', 46)),
annotation_legend_param = list(
title = "Pathway type",
at = c('metabolic','hallmark'),
labels = c('metabolic','hallmark'))                                          )
Heatmap(tcga_gsva[1:200,1:400],
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno
)
View(tcga_gsva)
Heatmap(tcga_gsva[,1:400],
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno
)
Heatmap(tcga_gsva,
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno
)
patient.anno = HeatmapAnnotation(Cancer = tcga_anno$cancer_type_abbreviation,
annotation_legend_param = list(
title = "Cancer type",
at = names(table(tcga_anno$cancer_type_abbreviation)),
labels = names(table(tcga_anno$cancer_type_abbreviation))                                          )
)
pathway.anno = rowAnnotation(Pathway = c(rep('metabolic', 612), rep('hallmark', 46)),
annotation_legend_param = list(
title = "Pathway type",
at = c('metabolic','hallmark'),
labels = c('metabolic','hallmark'))                                          )
Heatmap(tcga_gsva,
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno
)
colours = list('blue4','dodgerblue4','deepskyblue','cyan',
'lightblue1','aquamarine','chartreuse4',
'aquamarine3','darkolivegreen','darkolivegreen4',
'chartreuse2','darkolivegreen2','lemonchiffon',
'yellow','peachpuff1','gold','orange','red',
'indianred3','orangered4','sienna4','tan3','salmon2',
'plum','rosybrown1','violetred','magenta','magenta4',
'maroon','wheat1','snow3','gray29','black')
pathway.col = list('deepskyblue', 'blue4')
pathway.col[[1]][1]
Class(pathway.col[[1]][1])
class(pathway.col[[1]][1])
names(pathway.col[[1]][1]) = 'metabolic'
names(pathway.col[[1]][1])
x = 'deepskyblue'; y = 'blue4'
names(x) = 'metabolic'
x
names(x) = 'metabolic', names(y) = 'hallmark'
names(x) = 'metabolic'; names(y) = 'hallmark'
y
pathway.col = list(x,y)
pathway.col[[1]][1]
#Bar annotation zur Unterscheidung woher die pathways kommen
pathway.anno = rowAnnotation(Pathway = c(rep('metabolic', 612), rep('hallmark', 46)),
col = pathway.col
annotation_legend_param = list(
title = "Pathway type",
at = c('metabolic','hallmark'),
labels = c('metabolic','hallmark'))                                          )
#Bar annotation die den Krebstyp markiert
patient.anno = HeatmapAnnotation(Cancer = tcga_anno$cancer_type_abbreviation[1:400],
annotation_legend_param = list(
title = "Cancer type",
at = names(table(tcga_anno$cancer_type_abbreviation[1:400])),
labels = names(table(tcga_anno$cancer_type_abbreviation[1:400]))                                          )
)
#Bar annotation zur Unterscheidung woher die pathways kommen
pathway.anno = rowAnnotation(Pathway = c(rep('metabolic', 612), rep('hallmark', 46)),
col = pathway.col,
annotation_legend_param = list(
title = "Pathway type",
at = c('metabolic','hallmark'),
labels = c('metabolic','hallmark'))                                          )
set.seed(123)
set.seed(123)
#Bar annotation die den Krebstyp markiert
patient.anno = HeatmapAnnotation(Cancer = tcga_anno$cancer_type_abbreviation[1:400],
annotation_legend_param = list(
title = "Cancer type",
at = names(table(tcga_anno$cancer_type_abbreviation[1:400])),
labels = names(table(tcga_anno$cancer_type_abbreviation[1:400]))                                          )
)
#Bar annotation zur Unterscheidung woher die pathways kommen
pathway.anno = rowAnnotation(Pathway = c(rep('metabolic', 612), rep('hallmark', 46)),
col = pathway.col,
annotation_legend_param = list(
title = "Pathway type",
at = c('metabolic','hallmark'),
labels = c('metabolic','hallmark'))                                          )
Heatmap(tcga_gsva[,1:400],
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno
)
Heatmap(tcga_gsva[,1:2000],
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno,
width = unit(30, "cm"), height = unit(20, "cm")
)
Heatmap(tcga_gsva[,1:400],
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno,
width = unit(30, "cm"), height = unit(20, "cm")
)
Heatmap(tcga_gsva[,1:400],
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno,
width = unit(25, "cm"), height = unit(18, "cm")
)
#Bar annotation die den Krebstyp markiert
patient.anno = HeatmapAnnotation(Cancer = tcga_anno$cancer_type_abbreviation,
annotation_legend_param = list(
title = "Cancer type",
at = names(table(tcga_anno$cancer_type_abbreviation)),
labels = names(table(tcga_anno$cancer_type_abbreviation))                                          )
)
#Bar annotation zur Unterscheidung woher die pathways kommen
pathway.anno = rowAnnotation(Pathway = c(rep('metabolic', 612), rep('hallmark', 46)),
annotation_legend_param = list(
title = "Pathway type",
at = c('metabolic','hallmark'),
labels = c('metabolic','hallmark'))                                          )
Heatmap(tcga_gsva,
column_title = 'Patients',row_title = 'Pathways',
show_column_names = F, show_row_names = F,
row_dend_reorder = T, column_dend_reorder = T,
#column_km = 33,
heatmap_legend_param = list(
title = 'Pathway activity of TCGA data', at = c(-2, 0, 2),
labels = c("underexpressed", "normally expressed", "overexpressed")
),
top_annotation = patient.anno,
left_annotation = pathway.anno,
width = unit(25, "cm"), height = unit(18, "cm")
)
# BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
select(org.Hs.eg.db, keys = keys(org.Hs.eg.db), columns = columns(org.Hs.eg.db))
select(org.Hs.eg, keys = keys(org.Hs.eg.db), columns = columns(org.Hs.eg.db))
select(org.Hs.eg.db, keys = keys(org.Hs.eg.db), columns = columns(org.Hs.eg.db))
select(OrgDb = org.Hs.eg.db, keys = keys(org.Hs.eg.db), columns = columns(org.Hs.eg.db))
BiocManager::install("org.Hs.eg.db")
#BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
select(OrgDb = org.Hs.eg.db, keys = keys(org.Hs.eg.db), columns = columns(org.Hs.eg.db))
library(GSVA)
library(ComplexHeatmap)
load('data/thca_tumor_exp_cleaned.RData')
load('data/thca_normal_exp_cleaned.RData')
load('data/pathways.RData')
thca_norm_gsva = gsva(as.matrix(tcga_exp_cleaned), pathways,
method = 'gsva',
kcdf = 'Gaussian'  #Da wir kontinuierliche Daten haben
)
thca_norm_gsva = gsva(as.matrix(thca_normal_exp_cleaned), pathways,
method = 'gsva',
kcdf = 'Gaussian'  #Da wir kontinuierliche Daten haben
)
View(thca_norm_gsva)
thca_tumor_gsva = gsva(as.matrix(thca_tumor_exp_cleaned), pathways,
method = 'gsva',
kcdf = 'Gaussian'  #Da wir kontinuierliche Daten haben
)
View(thca_tumor_gsva)
apply(thca_tumor_gsva, 1, mean)
#Berrechnen des Foldchanges zwischne beiden Daten
thca_logFC_gsva = apply(thca_tumor_gsva, 1, mean) - apply(thca_norm_gsva, 1, mean)
thca_logFC_gsva[1:10]
#pvalue berechen
thca_pval_gsva = c()
#pvalue berechen
thca_pval_gsva = c()
for (i in (1:nrow(thca_norm_gsva))){
res = wilcox.test(thca_tumor_gsva[i,], thca_norm_gsva[i,], alternative = 'two.sided')$p.value
thca_pval_gsva = append(thca_pval_gsva, res)
}
for (i in (1:nrow(thca_norm_gsva))){
res = wilcox.test(thca_tumor_gsva[i,], thca_norm_gsva[i,], alternative = 'two.sided')$p.value
thca_pval_gsva = append(thca_pval_gsva, res)
};rm(i);rm(res)
#pvalue berechen
thca_pval_gsva = c()
for (i in (1:nrow(thca_norm_gsva))){
res = wilcox.test(thca_tumor_gsva[i,], thca_norm_gsva[i,], alternative = 'two.sided')$p.value
thca_pval_gsva = append(thca_pval_gsva, res)
};rm(i);rm(res)
plot(thca_logFC_gsva,thca_pval_gsva)
plot(thca_logFC_gsva,-log(thca_pval_gsva))
hist(thca_pval_gsva)
plot(thca_logFC_gsva,-log(thca_pval_gsva))
plot(thca_logFC_gsva,-(thca_pval_gsva))
plot(thca_logFC_gsva,thca_pval_gsva))
plot(thca_logFC_gsva,thca_pval_gsva)
#Volcanoplot
thca_volcano = data.frame(thca_logFC_gsva, thca_pval_gsva) #die 2 Vektoren f?r unseren Volcano PLot werden in einen df gepackt, damit daraus ein plot erstellt werden kann
View(thca_volcano)
#Volcanoplot
thca_volcano = data.frame(thca_logFC_gsva, thca_pval_gsva) #die 2 Vektoren f?r unseren Volcano PLot werden in einen df gepackt, damit daraus ein plot erstellt werden kann
with(thca_volcano, plot(thca_volcano$thca_logFC_gsva, -log10(thca_volcano$thca_pval_gsva), main = "Volcano plot", xlab='log2(foldchange)',
ylab = '-log10(Pvalues)', pch = 20))
with(subset(thca_volcano, thca_logFC_gsva>alpha.kor & thca_pval_gsva < alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), col="orange", pch = 20))
with(subset(thca_volcano, thca_logFC_gsva< -alpha.kor & thca_pval_gsva < alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), col="green", pch = 20))
with(subset(thca_volcano, abs(thca_logFC_gsva) < alpha.kor | thca_pval_gsva > alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), pch=19, col="gray"))
#Volcanoplot
alpha.kor = 0.05
thca_volcano = data.frame(thca_logFC_gsva, thca_pval_gsva) #die 2 Vektoren f?r unseren Volcano PLot werden in einen df gepackt, damit daraus ein plot erstellt werden kann
with(thca_volcano, plot(thca_volcano$thca_logFC_gsva, -log10(thca_volcano$thca_pval_gsva), main = "Volcano plot", xlab='log2(foldchange)',
ylab = '-log10(Pvalues)', pch = 20))
with(subset(thca_volcano, thca_logFC_gsva>alpha.kor & thca_pval_gsva < alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), col="orange", pch = 20))
with(subset(thca_volcano, thca_logFC_gsva< -alpha.kor & thca_pval_gsva < alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), col="green", pch = 20))
with(subset(thca_volcano, abs(thca_logFC_gsva) < alpha.kor | thca_pval_gsva > alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), pch=19, col="gray"))
#Volcanoplot
alpha.kor = 0.1
thca_volcano = data.frame(thca_logFC_gsva, thca_pval_gsva) #die 2 Vektoren f?r unseren Volcano PLot werden in einen df gepackt, damit daraus ein plot erstellt werden kann
with(thca_volcano, plot(thca_volcano$thca_logFC_gsva, -log10(thca_volcano$thca_pval_gsva), main = "Volcano plot", xlab='log2(foldchange)',
ylab = '-log10(Pvalues)', pch = 20))
with(subset(thca_volcano, thca_logFC_gsva>alpha.kor & thca_pval_gsva < alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), col="orange", pch = 20))
with(subset(thca_volcano, thca_logFC_gsva< -alpha.kor & thca_pval_gsva < alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), col="green", pch = 20))
with(subset(thca_volcano, abs(thca_logFC_gsva) < alpha.kor | thca_pval_gsva > alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), pch=19, col="gray"))
thca_volcano = data.frame(thca_logFC_gsva, thca_pval_gsva) #die 2 Vektoren f?r unseren Volcano PLot werden in einen df gepackt, damit daraus ein plot erstellt werden kann
with(thca_volcano, plot(thca_volcano$thca_logFC_gsva, -log10(thca_volcano$thca_pval_gsva), main = "Volcano plot", xlab='log2(foldchange)',
ylab = '-log10(Pvalues)', pch = 20))
with(subset(thca_volcano, thca_logFC_gsva>alpha.kor & thca_pval_gsva < alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), col="orange", pch = 20))
with(subset(thca_volcano, thca_logFC_gsva< -alpha.kor & thca_pval_gsva < alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), col="green", pch = 20))
with(subset(thca_volcano, abs(thca_logFC_gsva) < alpha.kor | thca_pval_gsva > alpha.kor), points(thca_logFC_gsva, -log10(thca_pval_gsva), pch=19, col="gray"))
load('data/thca_genenames_cleaned.RData')
load('data/thca_genes_cleaned.RData')
